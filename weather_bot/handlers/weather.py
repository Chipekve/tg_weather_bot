import asyncio
import logging

from emoji import EMOJI_DATA
from aiogram import Router, F
from aiogram.types import Message
from database import db
from weather_api import fetch_weather

router = Router()

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def format_weather(weather: dict) -> str:
    wind_m_s = round(weather['current']['wind_kph'] / 3.6, 1)
    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ <b>{weather['location']['name']}</b>:\n"
        f"‚Ä¢ üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{weather['current']['temp_c']}¬∞C</b>\n"
        f"‚Ä¢ ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>{weather['current']['feelslike_c']}¬∞C</b>\n"
        f"‚Ä¢ üí® –í–µ—Ç–µ—Ä: <b>{wind_m_s} –º/—Å</b>\n"
        f"‚Ä¢ üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{weather['current']['humidity']}%</b>\n"
        f"‚Ä¢ ‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{weather['current']['condition']['text']}</b>"
    )

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã
async def show_weather(user_id: int, message: Message):
    user_city = db.get_user_city(user_id)

    if not user_city or not user_city[0]:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ø–æ–º–µ–Ω—è—Ç—å —á—Ç–æ-—Ç–æ –≤ –∂–∏–∑–Ω–∏'")
        return

    weather = await fetch_weather(city=user_city[0], city_id=user_city[1])

    if not weather:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")
        return

    text = await format_weather(weather)
    await message.answer(text, parse_mode="HTML")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "—á–æ –ø–æ –ø–æ–≥–æ–¥–µ"
@router.message(F.text == 'üëÄ–ß–æ –ø–æ –ø–æ–≥–æ–¥–µ ?')
async def handle_weather(message: Message):
    await show_weather(message.from_user.id, message)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "—á–æ –ø–æ –≥–æ—Ä–æ–¥—É"
@router.message(F.text == '—á–æ –ø–æ –≥–æ—Ä–æ–¥—É ü§åüèª')
async def show_city(message: Message):
    user_city = db.get_user_city(message.from_user.id)

    await message.answer(
        f"üìç–¢—ã —á–µ –∑–∞–±—ã–ª? {user_city[0]} ü§≠"
        if user_city and user_city[0]
        else "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–∂–º–∏ '–ø–æ–º–µ–Ω—è—Ç—å —á—Ç–æ-—Ç–æ –≤ –∂–∏–∑–Ω–∏'"
    )

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –º–µ–¥–∏–∞
@router.message(F.photo)
async def handle_photo(message: Message):
    await message.answer('–ó–∞—á–µ–º —Ç—ã –º–Ω–µ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å? ü§°')
    await asyncio.sleep(4)
    await message.answer_photo(
        message.photo[-1].file_id,
        reply_to_message_id=message.message_id,
        caption='–î–µ—Ä–∂–∏ –æ–±—Ä–∞—Ç–Ω–æ —Ç–≤–æ—é —Ö—É—è—á–∫—É ü•±',
    )

@router.message(F.sticker)
async def handle_sticker(message: Message):
    first_msg = await message.answer('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∑–∞—á–µ–º —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —ç—Ç–æ ? üòê')
    await asyncio.sleep(5)
    await first_msg.edit_text("–Ω–∞—Ç–µ ü´°")
    await message.answer_sticker(
        message.sticker.file_id,
        reply_to_message_id=message.message_id
    )

@router.message(F.text)
async def handle_text(message: Message):
    text = message.text
    if any(char in EMOJI_DATA for char in text):
        first_msg = await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —Ç–µ–±–µ —Å–º–µ—à–Ω–æ —á—Ç–æ –ª–∏?")
        await asyncio.sleep(2)
        await first_msg.edit_text(f"–î–µ—Ä–∂–∏ —Å–≤–æ—é —ç–º–æ–¥–∑–∏ –Ω–∞–∑–∞–¥", parse_mode=None)
        await asyncio.sleep(1)
        emojis = "".join(c for c in text if c in EMOJI_DATA)
        await message.answer(emojis)
        await message.delete()
    else:
        await message.answer("–ó–∞—á–µ–º —Ç—ã —Å–æ –º–Ω–æ–π –≥–æ–≤–æ—Ä–∏—à—å?üëÄ\n–Ø –ø–æ –ø–æ–≥–æ–¥–µ –¥–≤–∏–≥–∞—é—Å—å, –æ—á–Ω–∏—Å—å üê¥")

@router.message(F.voice)
async def handle_voice(message: Message):
    await asyncio.sleep(2)
    await message.delete()
    await message.answer("–ê–ª–æ, —á–µ–ª!\n—è –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —á–æ –ø–æ –ø–æ–≥–æ–¥–µ, –Ω–æ —è –ø–ª–æ—Ö–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")
    await asyncio.sleep(6)
    await message.answer('–ù–µ.. –Ω—É —Ç—ã –≤–Ω–∞—Ç—É—Ä–µ –ø—Ä–∏–¥—É–º–∞–ª —Ö–æ—Ä–æ—à–æ\n–û–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º ü§°')