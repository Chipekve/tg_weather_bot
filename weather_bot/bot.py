import asyncio
import logging
import os

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramForbiddenError, TelegramNotFound
from aiogram.fsm.storage.memory import MemoryStorage
import colorlog

from handlers import routers
from database import db, Database
from keyboards import get_reply_menu
from handlers.weather_sender import send_weather_to_subscribers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging() -> None:
    handler = colorlog.StreamHandler()
    formatter = colorlog.ColoredFormatter(
        "%(log_color)s%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        log_colors={
            "DEBUG": "cyan",
            "INFO": "green",
            "WARNING": "yellow",
            "ERROR": "red",
            "CRITICAL": "red,bg_white",
        },
    )
    handler.setFormatter(formatter)
    logging.basicConfig(level=logging.INFO, handlers=[handler])


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
async def periodic_weather_task(bot: Bot, interval: int = 15) -> None:
    while True:
        await send_weather_to_subscribers(bot)
        await asyncio.sleep(interval)

async def broadcast_reply_keyboards(bot: Bot, db: Database):
    users = await asyncio.to_thread(db.get_all_users)

    for user in users:
        try:
            await bot.send_chat_action(user.telegram_id, action="typing")
            await bot.send_message(
                chat_id=user.telegram_id,
                text="–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                reply_markup=get_reply_menu(user.is_subscribed),
            )
        except (TelegramForbiddenError, TelegramNotFound):
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}", exc_info=True)

    logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

async def main() -> None:
    setup_logging()
    load_dotenv()
    logger = logging.getLogger(__name__)

    BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
    if not BOT_TOKEN:
        logger.critical("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    await broadcast_reply_keyboards(bot, db)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    for router in routers:
        dp.include_router(router)

    asyncio.create_task(periodic_weather_task(bot))

    try:
        logger.info("–†–µ–±—è—Ç–∞ –º—ã —Ä–∞–∑–≥–æ–Ω—è–µ–º—Å—è üöÅ")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ö—É–¥–∞ —Ç—ã —Ä–∞–∑–≥–æ–Ω—è–µ—à—å—Å—è? ü§°")
        await bot.session.close()
        db.close()
        logger.info("‚úÖ –≤—Å–µ, —Å—Ç–æ–∏–º.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Ctrl+C)")
    except Exception as e:
        logging.critical(f"‚ùó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
