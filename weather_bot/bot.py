import asyncio
import logging
import colorlog
import os
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from my_handlers import router
from database import db


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–Ø—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    handler = colorlog.StreamHandler()
    handler.setFormatter(colorlog.ColoredFormatter(
        '%(log_color)s%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'red,bg_white',
        }
    ))
    logging.basicConfig(
        level=logging.INFO,
        handlers=[handler]
    )

#  –ì–ª–æ–±–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º bot ‚Äî —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤ shutdown –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å (—É–µ–±–∞—Ç—å)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)
storage = MemoryStorage()

#  graceful_shutdown_—Ñ—É–Ω–∫—Ü–∏—è
async def shutdown():
    logging.info(">>> [SHUTDOWN] –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
    await bot.session.close()
    db.close()
    logging.info(">>> [SHUTDOWN] –ì–æ—Ç–æ–≤–æ!")

def get_shutdown_handler(bot: Bot, dp: Dispatcher):
    async def shutdown():
        logging.info(">>> [SHUTDOWN] –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...")
        await bot.session.close()
        db.close()
        logging.info(">>> [SHUTDOWN] –ö—É–¥–∞ —Ç—ã —Ç–∞–º —Ä–∞–∑–≥–æ–Ω—è–µ—à—å—Å—è? ‚úãüèª")
    return shutdown

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    setup_logging()
    logger = logging.getLogger(__name__)

    try:
        logger.info("–†–µ–±—è—Ç–∞ –º—ã —Ä–∞–∑–≥–æ–Ω—è–µ–º—Å—è üöÅ")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        await shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info(">>> –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Ctrl+C)")
    except Exception as e:
        logging.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)